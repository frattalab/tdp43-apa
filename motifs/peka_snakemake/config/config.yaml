# 'comparison_name', 'regions_bed', 'foreground_key' columns
# comparison_name - unique identifier to track comparison of interest
# regions_bed - BED of single nucleotide coordinates of two groups of events that wish to compare
# foreground_key - string present in 'Name' field of BED file that identifies 'foreground' events
sample_table: config/sample_table.csv

# base output directory for pipeline run
base_output_dir: output_peka/

# path to genome fasta
genome: data/GRCh38.primary_assembly.genome.fa
# path to genome fasta index
genome_idx: data/GRCh38.primary_assembly.genome.fa.fai

# genome segmentation file produced as output of "iCount segment" function
# (NB: for our hacky use case of looking across the whole genome, pre-provided GTF is sufficient)
regions_gtf: data/sorted.regions.gtf.gz
# kmer length
kmer: 5
# window around thresholded crosslinks (in our case genomic landmarks) for finding enriched kmers (PEKA default: 20)
window: 20
# window aound enriched kmers to calculate distribution (PEKA default: 150)
distal_window: 150

# choose to run PEKA on a specific region only, to specify multiple regions enter them space separated (default: only )
specific_region: "genome"

# controls the number of outputs, can be True or False. Recommend setting to True for our use case to make custom plot
alloutputs: True

# Percentile for considering thresholded crosslinks. Accepts a value between 0 and 1 [0, 1). 
# Percentile 0.7 means that a cDNA count threshold is determined at which >=70 percent of the crosslink sites within the region have a cDNA count equal or below the threshold.
# Thresholded crosslinks have cDNA count above the threshold. [DEFAULT 0.7]
# for our purposes, cDNA count is irrelevant (so want treat all background equally), so set to 0
percentile: 0

# Percentile to set as threshold for relevant positions. Accepted values are floats between 0 and 99 [0, 99].
# If threshold is set to 0 then all positions within the set window (-w, default 20 nt) will be considered for enrichment calculation. 
# If threshold is not zero, it will be used to determine relevant positions for enrichment calculation for each k-mer. 
# If the -pos option is not set, then the threshold will be automatically assigned based on k-mer length and number of crosslinks in region.
# for pipeline, please pass 'auto' if you want the threshold to be automatically assigned
# otherwise a float betweeen 0 & 99
relpos: 0


## cv_coverage parameters (to get speicifc occurrences of motifs across window)

# flag whether to run cv_coverage.py or not
run_cv_coverage: True

# group of motifs to be displayed around the input landmarks
# Should be same length as kmer
# pass as a list of strings
cv_coverage_motifs: ["UGUGU", "GUGUG"]

# the size of the smoothing window (rolling mean), usually 12
cv_coverage_smoothing: 12

# If True, each landmark is weighted by its score, else all landmarks will have equal weigths of 1
# for our purposes set to False
cv_coverage_usescores: False

# is the number of threads used in the process (4 is the usual value);
# if > 1 & using uCL submit.sh, be sure to update the request
cv_coverage_n_cores: 1

# is the max value for any landmarks score. 
# It is only used if use_scores is set to True (20 is the recommended value);
cv_coverage_cap: 20
